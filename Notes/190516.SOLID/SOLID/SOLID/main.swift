//
//  main.swift
//  SOLID
//
//  Created by 이동영 on 14/05/2019.
//  Copyright © 2019 부엉이. All rights reserved.
//

import Foundation


///==================================================================
///                              1. LSP
///------------------------------------------------------------------
/// - Note: 서브클래스는 슈퍼클래스의 역할을 수행하는 데에 어려움이 없어야한다.
/// - Note: 재정의가 올바르지 않게 되어서는 안된다.
///
/// - Todo: 재정의가 너무 많아도 다시 수직적으로 확장을 하는게 맞는지 생각해보자.
///==================================================================

//
//let 공중전화기 = 전화기()
//let 아이폰 = 스마트폰()
//
//공중전화기.전화하다( 119)
//
//let 어떤전화기: 전화기 = 아이폰
//
//어떤전화기.전화하다(119)





///==================================================================
///                              2. ISP
///------------------------------------------------------------------
/// - Note: 인터페이스는 최소한으로 분리되어야한다.
/// - Note: 필요없는 인터페이스(외부에서 실행가능한 함수) 가 구현되어서는 안된다.
///
/// - Todo: 프로토콜에 선언된 함수들이 밀접한 연관이 있는 지 생각해보자.
///==================================================================

//let 핸드폰 = 동영상을못찍는스마트폰()
//핸드폰.동영상을찍다()

///==================================================================
///                              3. SRP
///------------------------------------------------------------------
/// - Note: 하나의 클래스의 책임은 하나만 가져야 한다.
/// - Note: 클래스의 수정이유는 단 하나여야 한다.
/// - Note: 하나의 책임이 여러개의 클래스에 나뉘어있어서도 안된다.
///
/// - Todo: 하나의 클래스가 수정이유가 여러개인지 검토해보자.
///==================================================================

//let 핸드폰 = 스마트폰()
//핸드폰.게임어플.게임하다()


///==================================================================
///                              4. DIP
///--------------------------------------- ---------------------------
/// - Note: 상위레벨 모듈은 하위레벨 모듈에 의존하면 안된다.
/// - Note: 두 모듈은 추상화된 인터페이스(프로토콜)에 의존해야 한다.
///
/// - Todo: 외부에서 입력을 받지 않고 내부에서 구체적 클래스를 생성하는지 검토해보자.
///==================================================================


///==================================================================
///                              5. OCP
///------------------------------------------------------------------
/// - Note: 확장에는 열려있으나 변경에는 닫혀 있어야 한다. 
/// - Note: 모듈이 주변환경에 너무 의존해서는 안된다.
///
/// - Todo: 요구사항의 추가 또는 기존사항의 변경에 대해 영향을 받는 부분을 최소화하자.
///==================================================================



//
//let 핸드폰 = 스마트폰(전화어플: T전화(), 게임어플: 앵그리버드(), 사진어플: 캔디카메라(), 동영상어플: 카카오비디오())
//
//
//



//
//class 직사각형{
//    var 밑변:Int
//    var 높이:Int
//    var 넓이:Int { return 밑변*높이 }
//
//    init(밑변:Int,높이:Int) {
//        self.밑변 = 밑변
//        self.높이 = 높이
//    }
//
//}
//
//class 정사각형:직사각형{
//
//    override var 높이 :Int {
//        // 높이가 변할때 밑변을 높이와 일치 시켜요!
//        didSet{
//            밑변 = 높이
//        }
//    }


let 나의직사각형 = 직사각형(밑변: 10, 높이: 5)
print(나의직사각형.넓이)  // 50

let 나의정사각형 = 정사각형(밑변: 5, 높이: 5)
print(나의정사각형.넓이) // 25

let 직사각형역할:직사각형 = 나의정사각형
직사각형역할.밑변 = 10
